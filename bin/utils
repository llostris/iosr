#!/bin/bash -eu

source $OPENSHIFT_CARTRIDGE_SDK_BASH

function getLogTimeStamp {
  echo "$(date +"%y-%m-%d %H:%M:%S") : "
}


function isAppWithManifest {
  if [ -e "$OPENSHIFT_REPO_DIR/manifest.yml" ]
  then
    echo $(getLogTimeStamp) "Found manifest file in app directory" >> $OPENSHIFT_SPARK_LOG
    echo 0
  else
    echo $(getLogTimeStamp) "Didn't found manifest file in app directory" >> $OPENSHIFT_SPARK_LOG
    echo 1
  fi
}

function loadDataFromManifest {
  source $OPENSHIFT_SPARK_DIR/manifest.properties
  source $OPENSHIFT_SPARK_DIR/template/config.properties

  echo $(getLogTimeStamp) "Cluster size found in manifest: $SPARK_CLUSTER_SIZE" >> $OPENSHIFT_SPARK_LOG
  SPARK_CLUSTER_TEMPLATE_ID_VAR="CLUSTER_TEMPLATE_ID_${SPARK_CLUSTER_SIZE^^}"
  export OPENSHIFT_SPARK_CLUSTER_TEMPLATE_ID=${!SPARK_CLUSTER_TEMPLATE_ID_VAR}

  if [ -n $OPENSHIFT_SPARK_CLUSTER_TEMPLATE_ID ]
  then
    echo $OPENSHIFT_SPARK_CLUSTER_TEMPLATE_ID > $OPENSHIFT_SPARK_DIR/env/OPENSHIFT_SPARK_CLUSTER_TEMPLATE_ID
    echo $(getLogTimeStamp) "Cluster template id on OpenStack: ${OPENSHIFT_SPARK_CLUSTER_TEMPLATE_ID}" >> $OPENSHIFT_SPARK_LOG
  else
    echo $(getLogTimeStamp) "Cluster template id is empty. Cluster won't be created." >> $OPENSHIFT_SPARK_LOG
    exit 1
  fi

  echo "Binary file path specified in manifest: $SPARK_JOB_BINARY_PATH" >> $OPENSHIFT_SPARK_LOG
  export OPENSHIFT_SPARK_BINARY_PATH="$OPENSHIFT_REPO_DIR$SPARK_JOB_BINARY_PATH"  # taken from manifest
  echo "Resolved path: $OPENSHIFT_SPARK_BINARY_PATH" >> $OPENSHIFT_SPARK_LOG
  echo $OPENSHIFT_SPARK_BINARY_PATH > $OPENSHIFT_SPARK_DIR/env/OPENSHIFT_SPARK_BINARY_PATH

  timestamp="$(date +"%m%d%H%M%S")"
  EXTENSION=${SPARK_JOB_BINARY_PATH##*.}
  export OPENSHIFT_SPARK_BINARY_NAME="f9s-${OPENSHIFT_APP_UUID}-${timestamp}.$EXTENSION"
  echo $OPENSHIFT_SPARK_BINARY_NAME > $OPENSHIFT_SPARK_DIR/env/OPENSHIFT_SPARK_BINARY_NAME
  echo "Binary internal name: $OPENSHIFT_SPARK_BINARY_NAME" >> $OPENSHIFT_SPARK_LOG

  export OPENSHIFT_SPARK_JOB_MAIN_CLASS=$SPARK_JOB_MAIN_CLASS
  echo $OPENSHIFT_SPARK_JOB_MAIN_CLASS > $OPENSHIFT_SPARK_DIR/env/OPENSHIFT_SPARK_JOB_MAIN_CLASS
  echo "Main class specified in manifest: $SPARK_JOB_MAIN_CLASS" >> $OPENSHIFT_SPARK_LOG

  for var in SPARK_OPENSTACK_URL SPARK_OPENSTACK_USERNAME SPARK_OPENSTACK_PASSWORD \
      SPARK_OPENSTACK_TENANT_ID SPARK_OPENSTACK_TENANT_NAME \
      SPARK_NEUTRON_MANAGEMENT_NETWORK SPARK_INPUT_ID SPARK_OUTPUT_ID
  do
    full_var_name=OPENSHIFT_${var}
    export OPENSHIFT_${var}=${!var}
    echo ${!full_var_name} > $OPENSHIFT_SPARK_DIR/env/${full_var_name}
    echo "Setting up environmental variable ${full_var_name}: ${!full_var_name}" >> $OPENSHIFT_SPARK_LOG
  done
}

function cleanup {  
  rm -rf "$OPENSHIFT_SPARK_DIR"/temp
  mkdir "$OPENSHIFT_SPARK_DIR"/temp
}

# function isDeleteSuccessful(response id name) {

# }

function authenticate {
  sed -e "s/{TENANT_NAME}/$OPENSHIFT_SPARK_OPENSTACK_TENANT_NAME/g" \
    -e "s/{USERNAME}/$OPENSHIFT_SPARK_OPENSTACK_USERNAME/g" \
    -e "s/{PASSWORD}/$OPENSHIFT_SPARK_OPENSTACK_PASSWORD/g" \
    "$OPENSHIFT_SPARK_DIR"/template/json/authenticate.json > "$OPENSHIFT_SPARK_DIR"/temp/authenticate_resolved.json

  curl -s -X POST "$OPENSTACK_AUTH_URL/tokens" \
      -H "Content-Type: application/json" \
      -d @"$OPENSHIFT_SPARK_DIR"/temp/authenticate_resolved.json \
      > "$OPENSHIFT_SPARK_DIR"/temp/response_authenticate.json

  # parse response and save token to appropriate environmental variable
  export OPENSTACK_TOKEN=`cat $OPENSHIFT_SPARK_DIR/temp/response_authenticate.json | $OPENSHIFT_SPARK_JQ -r '.access.token.id'`
  echo $OPENSTACK_TOKEN > $OPENSHIFT_SPARK_DIR/env/OPENSTACK_TOKEN
  echo "Your token is $OPENSTACK_TOKEN" >> $OPENSHIFT_SPARK_LOG
  echo "$OPENSTACK_TOKEN"
}

# cluster management
# ========================

function createCluster {
  client_message "Creating Spark clusters on OpenStack..."

  cleanup

  timestamp="$(date +"%m%d%H%M%S")"

  TOKEN=$(authenticate)
  client_message "Your token is: $TOKEN"

  sed -e "s/{UUID}/$OPENSHIFT_APP_UUID/g" \
    -e "s/{TIMESTAMP}/$timestamp/g" \
    -e "s/{CLUSTER_TEMPLATE_ID}/$OPENSHIFT_SPARK_CLUSTER_TEMPLATE_ID/g" \
    -e "s/{OPENSTACK_NETWORK_ID}/$OPENSHIFT_SPARK_NEUTRON_MANAGEMENT_NETWORK/g" \
    "$OPENSHIFT_SPARK_DIR"/template/json/launch_cluster.json > "$OPENSHIFT_SPARK_DIR"/temp/launch_cluster_resolved.json

  curl -s -X POST "$OPENSTACK_SAHARA_URL/clusters" \
      -H "Content-Type: application/json" \
      -H "X-Auth-Token: $TOKEN" \
      -d @"$OPENSHIFT_SPARK_DIR"/temp/launch_cluster_resolved.json \
      > "$OPENSHIFT_SPARK_DIR"/temp/response_launch_cluster.json

  ERROR_MSG=`cat $OPENSHIFT_SPARK_DIR/temp/response_launch_cluster.json | $OPENSHIFT_SPARK_JQ -r '.error_message'`

  if [ "$ERROR_MSG" == 'null' ]
  then
    export OPENSHIFT_SPARK_CLUSTER_ID=`cat $OPENSHIFT_SPARK_DIR/temp/response_launch_cluster.json | $OPENSHIFT_SPARK_JQ -r '.cluster.id'`
    export OPENSHIFT_SPARK_MANAGEMENT_KEY=`cat $OPENSHIFT_SPARK_DIR/temp/response_launch_cluster.json | $OPENSHIFT_SPARK_JQ -r '.cluster.management_public_key'`

    echo $(getLogTimeStamp) "Cluster id: $OPENSHIFT_SPARK_CLUSTER_ID" >> $OPENSHIFT_SPARK_LOG
    client_message "Cluster id: $OPENSHIFT_SPARK_CLUSTER_ID"

    echo $OPENSHIFT_SPARK_CLUSTER_ID > $OPENSHIFT_SPARK_DIR/env/OPENSHIFT_SPARK_CLUSTER_ID
    echo $OPENSHIFT_SPARK_MANAGEMENT_KEY > $OPENSHIFT_SPARK_DIR/env/OPENSHIFT_SPARK_MANAGEMENT_KEY
  else
    echo $(getLogTimeStamp) "Failed to start cluster. Error message: ${ERROR_MSG}" >> $OPENSHIFT_SPARK_LOG
  fi
}

function stopCluster {
  OPENSTACK_TOKEN=$(authenticate)
  client_message "STOP: your token is: $OPENSTACK_TOKEN"
  
  curl -s -X DELETE "$OPENSTACK_SAHARA_URL/clusters/${OPENSHIFT_SPARK_CLUSTER_ID}" \
    -H "Content-Type: application/json" \
    -H "X-Auth-Token: $OPENSTACK_TOKEN" \
    -o /dev/null -i -w "%{http_code}" > "$OPENSHIFT_SPARK_DIR"/temp/response_stop_cluster.json

  RESPONSE_CODE=`cat $OPENSHIFT_SPARK_DIR/temp/response_stop_cluster.json`

  if [ $RESPONSE_CODE -eq 204 ]
  then
    echo $(getLogTimeStamp) "Cluster with id ${OPENSHIFT_SPARK_CLUSTER_ID} stopped successfully." >> $OPENSHIFT_SPARK_LOG
    client_message "Cluster with id ${OPENSHIFT_SPARK_CLUSTER_ID} stopped successfully."
  else
    echo $(getLogTimeStamp) "Error terminating ${OPENSHIFT_SPARK_CLUSTER_ID} cluster. " >> $OPENSHIFT_SPARK_LOG
  fi
}

function checkClusterStatus {
  OPENSTACK_TOKEN=$(authenticate)
  client_message "checkClusterStatus: your token is: $OPENSTACK_TOKEN"

  curl -s -X GET "$OPENSTACK_SAHARA_URL/clusters/${OPENSHIFT_SPARK_CLUSTER_ID}" \
      -H "Content-Type: application/json" \
      -H "X-Auth-Token: $TOKEN" > "$OPENSHIFT_REPO_DIR/temp/response_cluster_status.json"

  ERROR_MSG=`cat $OPENSHIFT_SPARK_DIR/temp/response_cluster_status.json | $OPENSHIFT_SPARK_JQ -r '.error_message'`

  if [ "$ERROR_MSG" == 'null' ]
  then
    OPENSHIFT_SPARK_CLUSTER_STATUS=`cat $OPENSHIFT_SPARK_DIR/temp/response_cluster_status.json | $OPENSHIFT_SPARK_JQ -r '.cluster.status'`
    echo $OPENSHIFT_SPARK_CLUSTER_STATUS > $OPENSHIFT_SPARK_DIR/env/OPENSHIFT_SPARK_CLUSTER_STATUS

    echo $(getLogTimeStamp) "Current status of cluster with id: ${OPENSHIFT_SPARK_CLUSTER_ID} is: ${OPENSHIFT_SPARK_CLUSTER_STATUS}" >> $OPENSHIFT_SPARK_LOG

    echo $OPENSHIFT_SPARK_CLUSTER_STATUS
  else
    echo $(getLogTimeStamp) "Failed to obtain status information about cluster with id: ${OPENSHIFT_SPARK_CLUSTER_ID}. Error message: ${ERROR_MSG}" >> $OPENSHIFT_SPARK_LOG

    echo "ERROR"
  fi
}

# create job
# ========================

function createJobBinaryInternal {
  OPENSTACK_TOKEN=$(authenticate)
  client_message "createJobBinaryInternal: your token is: $OPENSTACK_TOKEN"

  echo "Creating binary with name: $OPENSHIFT_SPARK_BINARY_NAME from file $OPENSHIFT_SPARK_BINARY_PATH" >> $OPENSHIFT_SPARK_LOG
  
  curl -s -X PUT "$OPENSTACK_SAHARA_URL/job-binary-internals/$OPENSHIFT_SPARK_BINARY_NAME" \
    -H "X-Auth-Token: $OPENSTACK_TOKEN" \
    --data-binary @"$OPENSHIFT_SPARK_BINARY_PATH" \
    > "$OPENSHIFT_SPARK_DIR"/temp/response_job_binary_internal.json

  ERROR_MSG=`cat $OPENSHIFT_SPARK_DIR/temp/response_job_binary_internal.json | $OPENSHIFT_SPARK_JQ -r '.error_message'`

  if [ "$ERROR_MSG" == 'null' ]
  then
    export OPENSHIFT_SPARK_JOB_BINARY_INTERNAL_ID=`cat $OPENSHIFT_SPARK_DIR/temp/response_job_binary_internal.json | $OPENSHIFT_SPARK_JQ -r '.job_binary_internal.id'`
    echo $OPENSHIFT_SPARK_JOB_BINARY_INTERNAL_ID > $OPENSHIFT_SPARK_DIR/env/OPENSHIFT_SPARK_JOB_BINARY_INTERNAL_ID
    
    echo $(getLogTimeStamp) "Created job binary internal with id: ${OPENSHIFT_SPARK_JOB_BINARY_INTERNAL_ID} successfully." >> $OPENSHIFT_SPARK_LOG
    client_message "Created job binary internal with id: ${OPENSHIFT_SPARK_JOB_BINARY_INTERNAL_ID} successfully."
  else
    echo $(getLogTimeStamp) "Error occurred during job binary internal creation: $ERROR_MSG" >> $OPENSHIFT_SPARK_LOG
  fi
}

function createJobBinary {
  OPENSTACK_TOKEN=$(authenticate)
  client_message "createJobBinary: your token is: $OPENSTACK_TOKEN"

  timestamp="$(date +"%m%d%H%M%S")"
  BINARY_NAME="f9s-${OPENSHIFT_APP_UUID}-${timestamp}"  # TODO: replace

  sed -e "s/{JOB_BINARY_INTERNAL_ID}/$OPENSHIFT_SPARK_JOB_BINARY_INTERNAL_ID/g" \
    -e "s/{TIMESTAMP}/$timestamp/g" \
    -e "s/{BINARY_NAME}/$BINARY_NAME/g" \
    "$OPENSHIFT_SPARK_DIR"/template/json/job_binary.json > "$OPENSHIFT_SPARK_DIR"/temp/job_binary_resolved.json

  curl -s -X POST "$OPENSTACK_SAHARA_URL/job-binaries" \
    -H "X-Auth-Token: $OPENSTACK_TOKEN" \
    -H "Content-Type: application/json" \
    -d @"$OPENSHIFT_SPARK_DIR/temp/job_binary_resolved.json" \
    > "$OPENSHIFT_SPARK_DIR"/temp/response_job_binary.json

  ERROR_MSG=`cat $OPENSHIFT_SPARK_DIR/temp/response_job_binary.json | $OPENSHIFT_SPARK_JQ -r '.error_message'`

  if [ "$ERROR_MSG" == 'null' ]
  then
    export OPENSHIFT_SPARK_JOB_BINARY_ID=`cat $OPENSHIFT_SPARK_DIR/temp/response_job_binary.json | $OPENSHIFT_SPARK_JQ -r '.job_binary.id'`
    echo $OPENSHIFT_SPARK_JOB_BINARY_ID > $OPENSHIFT_SPARK_DIR/env/OPENSHIFT_SPARK_JOB_BINARY_ID
    
    echo $(getLogTimeStamp) "Created job binary with id: ${OPENSHIFT_SPARK_JOB_BINARY_ID} successfully." >> $OPENSHIFT_SPARK_LOG
    client_message "Created job binary with id: ${OPENSHIFT_SPARK_JOB_BINARY_ID} successfully."
  else
    echo $(getLogTimeStamp) "Error occurred during job binary creation: $ERROR_MSG" >> $OPENSHIFT_SPARK_LOG
  fi
}

function createJob {
  OPENSTACK_TOKEN=$(authenticate)
  client_message "createJob: your token is: $OPENSTACK_TOKEN"

  timestamp="$(date +"%Y%m%d%H%M%S")"

  sed -e "s/{NAME}/${OPENSHIFT_APP_UUID}/g" \
    -e "s/{TIMESTAMP}/$timestamp/g" \
    -e "s/{JOB_BINARY_ID}/$OPENSHIFT_SPARK_JOB_BINARY_ID/g" \
    "$OPENSHIFT_SPARK_DIR"/template/json/job.json > "$OPENSHIFT_SPARK_DIR"/temp/job_resolved.json

  curl -s -X POST "${OPENSTACK_SAHARA_URL}/jobs" \
    -H "Content-Type: application/json" \
    -H "X-Auth-Token: $OPENSTACK_TOKEN" \
    -d @"$OPENSHIFT_SPARK_DIR"/temp/job_resolved.json \
    > "$OPENSHIFT_SPARK_DIR"/temp/response_job.json
  
  ERROR_MSG=`cat $OPENSHIFT_SPARK_DIR/temp/response_job.json | $OPENSHIFT_SPARK_JQ -r '.error_message'`

  if [ "$ERROR_MSG" == 'null' ]
  then
    export OPENSHIFT_SPARK_JOB_ID=`cat $OPENSHIFT_SPARK_DIR/temp/response_job.json | $OPENSHIFT_SPARK_JQ -r '.job.id'`
    echo $OPENSHIFT_SPARK_JOB_ID > $OPENSHIFT_SPARK_DIR/env/OPENSHIFT_SPARK_JOB_ID
    
    echo $(getLogTimeStamp) "Created job with id: ${OPENSHIFT_SPARK_JOB_ID}" >> $OPENSHIFT_SPARK_LOG
    client_message "Created job with id: ${OPENSHIFT_SPARK_JOB_ID} successfully."
  else
    echo $(getLogTimeStamp) "Error occurred during job creation: $ERROR_MSG" >> $OPENSHIFT_SPARK_LOG
  fi

  # echo $OPENSHIFT_SPARK_JOB_ID
}

function resolveProperJobExecution {
  if [ -n "$OPENSHIFT_SPARK_INPUT_ID" ]
  then
    echo "Job with input and output data" >> $OPENSHIFT_SPARK_LOG

    sed -e "s/{CLUSTER_ID}/$OPENSHIFT_SPARK_CLUSTER_ID/g" \
      -e "s/{MAIN_CLASS}/$OPENSHIFT_SPARK_JOB_MAIN_CLASS/g" \
      -e "s@{INPUT_ID}@$OPENSHIFT_SPARK_INPUT_ID@g" \
      -e "s@{OUTPUT_ID}@$OPENSHIFT_SPARK_OUTPUT_ID@g" \
      "$OPENSHIFT_SPARK_DIR"/template/json/execute_job_hdfs.json > "$OPENSHIFT_SPARK_DIR"/temp/execute_job_resolved.json
  else
    sed -e "s/{CLUSTER_ID}/$OPENSHIFT_SPARK_CLUSTER_ID/g" \
      -e "s/{MAIN_CLASS}/$OPENSHIFT_SPARK_JOB_MAIN_CLASS/g" \
      "$OPENSHIFT_SPARK_DIR"/template/json/execute_job.json > "$OPENSHIFT_SPARK_DIR"/temp/execute_job_resolved.json
  fi
}

function executeJob {
  OPENSTACK_TOKEN=$(authenticate)
  client_message "executeJob: your token is: $OPENSTACK_TOKEN"

  resolveProperJobExecution

  curl -s -X POST "${OPENSTACK_SAHARA_URL}/jobs/${OPENSHIFT_SPARK_JOB_ID}/execute" \
    -H "Content-Type: application/json" \
    -H "X-Auth-Token: $OPENSTACK_TOKEN" \
    -d @"$OPENSHIFT_SPARK_DIR"/temp/execute_job_resolved.json \
    > "$OPENSHIFT_SPARK_DIR"/temp/response_execute_job.json

  ERROR_MSG=`cat $OPENSHIFT_SPARK_DIR/temp/response_execute_job.json | $OPENSHIFT_SPARK_JQ -r '.error_message'`

  if [ "$ERROR_MSG" == 'null' ]
  then
    JOB_STATUS=`cat $OPENSHIFT_SPARK_DIR/temp/response_execute_job.json | $OPENSHIFT_SPARK_JQ -r '.job_execution.info.status'`
    
    export OPENSHIFT_SPARK_JOB_EXECUTION_ID=`cat $OPENSHIFT_SPARK_DIR/temp/response_execute_job.json | $OPENSHIFT_SPARK_JQ -r '.job_execution.id'`
    echo $OPENSHIFT_SPARK_JOB_EXECUTION_ID > $OPENSHIFT_SPARK_DIR/env/OPENSHIFT_SPARK_JOB_EXECUTION_ID
    
    echo $(getLogTimeStamp) "Job execution id: ${OPENSHIFT_SPARK_JOB_EXECUTION_ID}" >> $OPENSHIFT_SPARK_LOG
    echo $(getLogTimeStamp) "Job execution status is ${JOB_STATUS}" >> $OPENSHIFT_SPARK_LOG
    client_message "Started job execution with id=${OPENSHIFT_SPARK_JOB_EXECUTION_ID}. Current job status is ${JOB_STATUS}."
  else
    echo $(getLogTimeStamp) "Error occurred when executing job with id ${OPENSHIFT_SPARK_JOB_ID}: $ERROR_MSG" >> $OPENSHIFT_SPARK_LOG
  fi
}

# delete job
# ========================

function deleteJobBinaryInternal {
  OPENSTACK_TOKEN=$(authenticate)  
  client_message "deleteJobBinaryInternal: your token is: $OPENSTACK_TOKEN"

  curl -s -X DELETE "$OPENSTACK_SAHARA_URL/job-binary-internals/${OPENSHIFT_SPARK_JOB_BINARY_INTERNAL_ID}" \
    -H "Content-Type: application/json" \
    -H "X-Auth-Token: $OPENSTACK_TOKEN" \
    -o /dev/null -i -w "%{http_code}" > "$OPENSHIFT_SPARK_DIR"/temp/response_delete_job_binary_internal.json

  RESPONSE_CODE=`cat $OPENSHIFT_SPARK_DIR/temp/response_delete_job_binary_internal.json`

  if [ $RESPONSE_CODE -eq 204 ]
  then
    echo $(getLogTimeStamp) "Job binary internal with id: ${OPENSHIFT_SPARK_JOB_BINARY_INTERNAL_ID} deleted successfully." >> $OPENSHIFT_SPARK_LOG
    client_message "Job binary internal with id: ${OPENSHIFT_SPARK_JOB_BINARY_INTERNAL_ID} deleted successfully."
  else
    echo $(getLogTimeStamp) "Error deleting job binary internal with id: $${OPENSHIFT_SPARK_JOB_BINARY_INTERNAL_ID}." >> $OPENSHIFT_SPARK_LOG
  fi
}

function deleteJobBinary {
  OPENSTACK_TOKEN=$(authenticate)  
  client_message "deleteJobBinary: your token is: $OPENSTACK_TOKEN"

  curl -s -X DELETE "$OPENSTACK_SAHARA_URL/job-binaries/${OPENSHIFT_SPARK_JOB_BINARY_ID}" \
    -H "Content-Type: application/json" \
    -H "X-Auth-Token: $OPENSTACK_TOKEN" \
    -o /dev/null -i -w "%{http_code}" > "$OPENSHIFT_SPARK_DIR"/temp/response_delete_job_binary.json

  RESPONSE_CODE=`cat $OPENSHIFT_SPARK_DIR/temp/response_delete_job_binary.json`

  if [ $RESPONSE_CODE -eq 204 ]
  then
    echo $(getLogTimeStamp) "Job binary with id: ${OPENSHIFT_SPARK_JOB_BINARY_ID} deleted successfully." >> $OPENSHIFT_SPARK_LOG
    client_message "Job binary with id: ${OPENSHIFT_SPARK_JOB_BINARY_ID} deleted successfully."
  else
    echo $(getLogTimeStamp) "Error deleting job binary with id: $${OPENSHIFT_SPARK_JOB_BINARY_ID}." >> $OPENSHIFT_SPARK_LOG
  fi
}

function deleteJob {
  OPENSTACK_TOKEN=$(authenticate)  
  client_message "deleteJob: your token is: $OPENSTACK_TOKEN"

  curl -s -X DELETE "$OPENSTACK_SAHARA_URL/jobs/${OPENSHIFT_SPARK_JOB_ID}" \
    -H "X-Auth-Token: $OPENSTACK_TOKEN" \
    -o /dev/null -i -w "%{http_code}" > "$OPENSHIFT_SPARK_DIR"/temp/response_delete_job.json

  RESPONSE_CODE=`cat $OPENSHIFT_SPARK_DIR/temp/response_delete_job.json`

  if [ $RESPONSE_CODE -eq 204 ]
  then
    echo $(getLogTimeStamp) "Job with id: ${OPENSHIFT_SPARK_JOB_ID} deleted successfully." >> $OPENSHIFT_SPARK_LOG
    client_message "Job with id: ${OPENSHIFT_SPARK_JOB_ID} deleted successfully."
  else
    echo $(getLogTimeStamp) "Error deleting job with id: ${OPENSHIFT_SPARK_JOB_ID}." >> $OPENSHIFT_SPARK_LOG
  fi
}

function deleteJobExecution {
  OPENSTACK_TOKEN=$(authenticate)  
  client_message "deleteJobExecution: your token is: $OPENSTACK_TOKEN"

  curl -s -X DELETE "${OPENSTACK_SAHARA_URL}/job-executions/${OPENSHIFT_SPARK_JOB_EXECUTION_ID}" \
    -H "X-Auth-Token: $OPENSTACK_TOKEN" \
    -o /dev/null -i -w "%{http_code}" > "$OPENSHIFT_SPARK_DIR"/temp/response_delete_job_execution.json

  RESPONSE_CODE=`cat $OPENSHIFT_SPARK_DIR/temp/response_delete_job_execution.json`

  if [ $RESPONSE_CODE -eq 204 ]
  then
    echo $(getLogTimeStamp) "Job execution with id: ${OPENSHIFT_SPARK_JOB_EXECUTION_ID} deleted successfully." >> $OPENSHIFT_SPARK_LOG
    client_message "Job execution with id: ${OPENSHIFT_SPARK_JOB_EXECUTION_ID} deleted successfully."
  else
    echo $(getLogTimeStamp) "Error deleting job execution with id: ${OPENSHIFT_SPARK_JOB_ID}." >> $OPENSHIFT_SPARK_LOG
  fi
}